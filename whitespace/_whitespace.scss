$debug-spacing: false;

 /* ====== Establish Default Spacing ====== */
h1, h2, h3, h4, h5, h6, ul, ol, dl, p, blockquote, .media, pre, .data, .line { // should they all @include default spacing instead?

// TODO: put these content based gutters back in for support for IE8-
//  @if ($gutters-v == $gutters-h){
//    margin: gutters-h;
//  } @else {
//    margin: $gutters-v $gutters-h; 
//  }
  margin-top: $gutters-v;
  margin-bottom: $gutters-v;
  &:first-child {
    margin-top:0;
  }
  &:last-child {
    margin-bottom:0;
  }
}
table {
  h1, h2, h3, h4, h5, h6, p, ul, ol, dl, blockquote, .media, pre{margin-left:0; margin-right: 0;}
}

/* debug default spacing 
 * set $debug-spacing to true to visualize spacing and positioning
 */
@if $debug-spacing {
  h1, h2, h3, h4, h5, h6, ul, ol, dl, p, blockquote, .media, pre, .data {
    outline: 1px solid aqua;
  }
  .media{
    outline:1px solid magenta;
  }
  :first-child{
    outline: 1px solid yellow;
  }
  :last-child{
    outline: 1px solid green;
  }
}


 
/** 
 * Spacing helpers 
 * Should be used to modify the default spacing between objects (not between nodes of the same object)
 * Please use judiciously. You want to be using defaults most of the time, these are exceptions! 
 * <type><location><size>
 *
 * p,m 				padding,margin
 * a,t,r,b,l,h,v	all,top,right,bottom,left,horizontal,vertical
 * s,m,l,n 			small(5px),medium(10px),large(20px),none(0px)
 */


$whitespace-keys: (p padding, m margin, a '', v -top -bottom, h -left -right, t -top, r -right, b -bottom, l -left);
@function expand-whitespace-key($k) {
  @each $pair in $whitespace-keys {
    $short: nth($pair, 1);
    $long: nth($pair, 2);
    @if $short == $k {
      @return $long;
    }
  }
  @warn "Couldn't expand #{$k}";
  @return $k;
}

@mixin  whitespace($sizes: (5px, 10px, 20px)){ //for now assume this list is always ascending
  $sizes: join(0, $sizes);
  $size-names: ();
  @if (length($sizes) == 1) {
    $size-names: (n);
    @warn "One spacing class isn't usually enough. Typically you should choose at least three."
  } @else if (length($sizes) == 2) {
    $size-names: (n, s);
    @warn "Two spacing classes isn't usually enough. Typically you should choose at least three."
  } @else if (length($sizes) == 3) {
    $size-names: (n, s, m);
  } @else if (length($sizes) == 4) {
    $size-names: (n, s, m, l);
  } @else if (length($sizes) == 5) {
    $size-names: (n, s, m, l, xl);
  } @else if (length($sizes) > 5) {
    $size-names: (n, xs, s, m, l, xl);
    @warn "No more than five spacing classes are supported, typically you want to have three."
  }
  $types: (p,m);
  $locations: (a, v, h, t, r, b, l);
  @each $location in $locations {
    @each $size-name in $size-names {
      @each $type in $types {
        .#{$type}#{$location}#{$size-name}{
          #{expand-whitespace-key($type)}#{expand-whitespace-key($location)}:nth($sizes, index($size-names, $size-name)) !important;
        }
      }
    }
  }
}