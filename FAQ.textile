Whoa, you have lots of questions! I'd better start recording the answers if I want to scale better.

<h2 id="idForStyle">Should I use IDs to style my content?</h2>

When you reuse an object in the same page (or on the same site if the cache is working properly), it is a performance "freebie".  Styling using IDs makes it impossible to use the same element twice on the same page. @cgriego (twitter) compared it to singletons, which sounds accurate to me.  There may be cases where you want to style using an ID, like header menus that are very specific, in this case you can use an ID to sandbox the particular element and be sure that the code written for it doesn't impact the rest of the site. Think carefully before you choose an ID over a class, it is <em>really hard to predict</em> what people will do with HTML built from your CSS as the site evolves. If you have a choice, leave things as flexible as possible.

I am considering removing the ids from head, body, and foot in my template. Someone could have multiple main content areas.  Multiple site headers and footers are more difficult to imagine, but I bet there is a designer who can dream up something like that, so the IDs are very likely to disappear. 

On the other hand, <em>ID hooks are great for linking</em>.  Put them in the HTML, just don't use them for styles.

<h2 id="designersCan">Designers can't do OOCSS, can they?</h2>

Yes, designers instinctively understand objects, it is much more concrete than the way most people are currently coding CSS --layers of exceptions (think, there was an old lady who swallowed a fly). In fact, they love OOCSS for two reasons.  

# It allows them to ramp up a lot faster when creating complex high traffic sites. They don't have to bother with understanding the structures until they are reasonably competent and comfortable with basic syntax.
# When learning CSS, they never have to create the ugly "hello world!" website.  Designers care very much that their work is beautiful.  If they have to make something ugly, even for the sake of learning, they will very quickly get frustrated and annoyed.  OO-CSS allows their work to be beautiful at each stage of the learning process. 

Designers are <strong>smart</strong>.  We need to give them credit. They may speak a different, non-engineering language, but often geeky language excludes people in a way that is kind of ugly. We can do better than that.

<h2 id="learn">I'm a Front-end Architect, how do I teach this to my team?</h2>

As the architect, you should write the structure object; set up how the rounded corner box is created, positions all the presentational elems for corners or other features, and deals with browser differences. Newbies write the skins for these modules (borders, colors, background images, etc).

I built large scale sites (1000s of pages, millions of visitors) using the OO-CSS method. It scales well and, when done correctly, it means that the individual components a newbie would be working on are relatively predictable. Code review is easy because there are clear rules about acceptable ways to extend objects. This kind of feedback makes new developers productive really quickly.

I managed a team of front end developers at FullSIX (a web marketing agency in France) who are among the most talented people I’ve ever worked with. At some point our success meant that we had far more work than we could handle. It is very hard to hire front-end experts (there is no school for this stuff!), so I started an <a href="http://www.slideshare.net/stubbornella/object-oriented-css/57">internal internship program where designers who were interested in exploring code</a> (but had little to no previous experience) could come work as junior members of our team for one month.

* Week 1: They learned about semantics and built html from existing CSS. Learning to build new pages without writing more CSS, HTML syntax, multiple classes, validation, semantics, intro to code review, etc.
* Week 2: They built simple content objects (headings, lists, etc) for a week. Learning CSS syntax, how to extend objects, colors, % sizes for text, etc.
* Week 3: they were building block skins. Borders, colors, background images, basic positioning, sprites. They worked with an amazing senior developer who answered a ton of questions and really helped them scale the learning curve. He also happens to be a very talented code reviewer.
* Week 4: they were productive members of my team building skins that were production ready.

Their code is live on a client website. It is as good as anything written by the senior developers, maybe better because they didn’t have to un-learn bad habits. :) 

<h2 id="GettingStarted">Getting Started: How do I work with these files?</h2>

Two files, libraries.css (reset and fonts from yui), grids.css and template.css are ready, the others are still extremely unstable. 

# Open template.html and save it as a new file.
# Adapt the number and width of the columns by extending those objects. You only need one template for your site, even if you have pages with different columns, because the columns are objects like anything else. You can think of them as optional regions, you may have 0-n left columns.  See template docs for more information.
# Use grids to break up any of the content areas into smaller chunks. See grids docs for more information.
# Add content.  Hint: This should also be OO.

<h2 id="deploy">How do I deploy this on a live site?</h2>

Keep in mind that the CSS is still evolving, I may change things based on feedback I'm receiving.

I've broken up the CSS files into modules like grids and template. On a real site you should remove unnecessary comments and reduce HTTP requests, or the site will be super slow.  This means you need to combine CSS files into one larger file.  I do that via nested comments, to keep the CSS organized.  Finally, run a CSS minifier as a part of the push/deployment process to remove stray comments.

<h2 id="editOverwrite">Should I edit these files, or overwrite them with my own stylesheet?</h2>

I wouldn't edit grids, template, or libraries.  A lot of testing has gone into getting those just right.  If you want to customize, think about <a href="#extend">extending the basic objects</a> instead.  

<h2 id="contentStyles">Pink is not my color! What do I do with content.css?</h2>

You may well want to edit content.css. Go ahead, change colors, font sizes, capitalization.  Just keep in mind that this file is rapidly evolving and I don't have any docs yet to show you how to do it correctly.  I'm working on it, I promise.

<h2 id="moreHeadings">I need more than six (h1-h6) headings on my site. How do I add more?</h2>

If you want more than six heading styles, extend the heading objects by adding a new class.

<pre>
.category{font-size:108%; font-weight:normal; font-style: normal; text-transform:uppercase; color: #333;}
</pre>

What <strong>not</strong> to do:

<pre>
#mySaleModule h2, #mySaleModule .h2{font-size:108%; font-weight:normal; font-style: normal; text-transform:uppercase; color: #333;}
</pre>

<h2 id="extend">How do I extend an object?</h2>

If you want to extend an object, for example a 160px left column, rather than the default, you should add an additional class to the column.

<pre>
<div class="leftCol gMail"> ... </div>
</pre>

If the default and extended widths of columns or pages don't match your site, you can extend the column to allow a custom width. 

<h3>Columns</h3>
<p><code>myColumn</code> extends column objects to allow for custom column widths.</p>

<pre>.myColumn{width:400px;}</pre>

And the HTML

<pre>
<div class="leftCol myColumn"> ... </div>
</pre>

Don't think of this as overwriting my classes, but rather <em>extending</em> the objects provided by the framework.  I give you columns, headings, and other objects.  You can extend those objects by adding another class that only specifies the differences between my base object and your implementation of the same. Mixins may be a good analogy here. 

What <strong>not</strong> to do (because it will make it harder for you to upgrade to newer versions of my framework):
<pre>
.leftCol{... custom css here ...}
</pre>

<h2 id="unusedStyles">Unused Styles. My site will never have a 160px gmail-style column, is it ok to remove it?</h2>

Sure.  Removing objects or extensions to those objects is perfectly reasonable. Just keep in mind that it is hard to imagine what HTML someone might build with your CSS when a site is still evolving. Premature optimization is a danger. 

<h2 id="singleTemplate">Why have a single template?</h2>

In object oriented CSS, an important goal is to have a single template from which all pages are built.  This eases CMS development because by having a single starting point all pages can be made into any other page. Users of the CMS do not have traps in which a page they have built cannot be morphed into a different page type.  Another goal of and OO template is to have each section (column, header, etc) control it's own destiny.  Practically, that means that if you want to add a left column to the template, the only required action should be actually adding the column to the HTML.  You never want to write CSS in such a way that changes are required higher in the DOM tree in order to make child elements behave properly.  Looping through the dom is costly for CMS development. 

